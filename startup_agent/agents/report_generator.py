import os
import json
import smtplib
import datetime
from pathlib import Path
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
from typing import Dict, List, Any
from jinja2 import Template

from startup_agent.config import (
    DATA_DIR, MAX_STARTUPS_PER_REPORT,
    EMAIL_RECIPIENT, EMAIL_SENDER, EMAIL_PASSWORD,
    SMTP_SERVER, SMTP_PORT
)

class ReportGenerator:
    """
    Agent 5: Report Generator
    Creates personalized email-ready reports from analyzed startup data
    """
    
    def __init__(self):
        self.email_template = Template("""
<!DOCTYPE html>
<html>
<head>
    <style>
        body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; max-width: 800px; margin: 0 auto; }
        .header { background-color: #4285f4; color: white; padding: 20px; text-align: center; }
        .startup { margin: 20px 0; padding: 15px; border: 1px solid #ddd; border-radius: 5px; }
        .startup-header { display: flex; justify-content: space-between; border-bottom: 1px solid #eee; padding-bottom: 10px; margin-bottom: 10px; }
        .company-name { font-size: 1.4em; font-weight: bold; color: #4285f4; }
        .funding { font-weight: bold; }
        .section { margin: 10px 0; }
        .section-header { font-weight: bold; color: #666; }
        .tag { background-color: #f1f1f1; border-radius: 3px; padding: 2px 6px; margin-right: 5px; font-size: 0.9em; display: inline-block; margin-bottom: 5px; }
        .footer { margin-top: 30px; text-align: center; font-size: 0.8em; color: #777; border-top: 1px solid #eee; padding-top: 10px; }
    </style>
</head>
<body>
    <div class="header">
        <h1>üöÄ Startup Opportunity Report</h1>
        <h2>{{ date }}</h2>
    </div>
    
    <p>Here are {{ startups|length }} recently funded startups that match your interests:</p>
    
    {% for startup in startups %}
    <div class="startup">
        <div class="startup-header">
            <div class="company-name">{{ startup.company_name }}</div>
            <div class="funding">{{ startup.funding_round }} - {{ startup.funding_amount }} {{ startup.funding_currency }}</div>
        </div>
        
        <div class="section">
            <div class="section-header">üìç Location:</div>
            {{ startup.location }}
        </div>
        
        <div class="section">
            <div class="section-header">üîç Description:</div>
            {{ startup.description }}
        </div>
        
        <div class="section">
            <div class="section-header">üîó Website:</div>
            <a href="{{ startup.website }}">{{ startup.website }}</a>
        </div>
        
        <div class="section">
            <div class="section-header">üß© Categories:</div>
            <div>
                {% for category in startup.categories %}
                <span class="tag">{{ category }}</span>
                {% endfor %}
            </div>
        </div>
        
        <div class="section">
            <div class="section-header">üíª Likely Tech Stack:</div>
            <div>
                {% for tech in startup.tech_stack %}
                <span class="tag">{{ tech }}</span>
                {% endfor %}
            </div>
        </div>
        
        <div class="section">
            <div class="section-header">üë• Potential Hiring Needs:</div>
            <div>
                {% for role in startup.hiring_needs %}
                <span class="tag">{{ role }}</span>
                {% endfor %}
            </div>
        </div>
        
        <div class="section">
            <div class="section-header">üéØ Product Focus:</div>
            {{ startup.product_focus }}
        </div>
        
        <div class="section">
            <div class="section-header">üìÖ Founded:</div>
            {{ startup.founded_year or 'Unknown' }}
        </div>
    </div>
    {% endfor %}
    
    <div class="footer">
        <p>This report was generated by Startup Agent on {{ date }}.</p>
        <p>You're receiving this because you requested updates on funded startups matching your profile.</p>
    </div>
</body>
</html>
        """)
    
    def generate_report(self) -> str:
        """
        Generate HTML report from the most recent analyzed startup data
        
        Returns:
            HTML string containing the report
        """
        # Find the most recent analyzed data file
        data_files = list(DATA_DIR.glob("funding_data_*_analyzed.json"))
        if not data_files:
            print("No analyzed startup data files found")
            return ""
            
        # Sort by modification time (most recent first)
        most_recent_file = max(data_files, key=os.path.getmtime)
        
        print(f"Generating report from {most_recent_file}...")
        
        # Load the data
        try:
            with open(most_recent_file, 'r', encoding='utf-8') as f:
                startup_data = json.load(f)
        except Exception as e:
            print(f"Error loading analyzed startup data: {e}")
            return ""
            
        # Limit to the top startups
        top_startups = startup_data[:MAX_STARTUPS_PER_REPORT]
        
        # Generate the HTML report
        today = datetime.datetime.now().strftime("%B %d, %Y")
        html_report = self.email_template.render(
            startups=top_startups,
            date=today
        )
        
        # Save the report
        report_date = datetime.datetime.now().strftime("%Y%m%d")
        report_path = DATA_DIR / f"startup_report_{report_date}.html"
        
        with open(report_path, 'w', encoding='utf-8') as f:
            f.write(html_report)
            
        print(f"Report saved to {report_path}")
        return html_report
    
    def send_email_report(self, html_content: str) -> bool:
        """
        Send the HTML report via email
        
        Args:
            html_content: HTML string to send
            
        Returns:
            True if the email was sent successfully, False otherwise
        """
        if not all([EMAIL_RECIPIENT, EMAIL_SENDER, EMAIL_PASSWORD]):
            print("Email settings are not configured. Check your .env file.")
            return False
            
        try:
            # Create the email
            msg = MIMEMultipart('alternative')
            msg['Subject'] = f"Startup Opportunities Report - {datetime.datetime.now().strftime('%B %d, %Y')}"
            msg['From'] = EMAIL_SENDER
            msg['To'] = EMAIL_RECIPIENT
            
            # Attach the HTML content
            msg.attach(MIMEText(html_content, 'html'))
            
            # Send the email
            with smtplib.SMTP(SMTP_SERVER, SMTP_PORT) as server:
                server.starttls()
                server.login(EMAIL_SENDER, EMAIL_PASSWORD)
                server.send_message(msg)
                
            print(f"Email sent to {EMAIL_RECIPIENT}")
            return True
            
        except Exception as e:
            print(f"Error sending email: {e}")
            return False
            
    def generate_and_send(self) -> bool:
        """
        Generate and send the report
        
        Returns:
            True if successful, False otherwise
        """
        html_report = self.generate_report()
        if not html_report:
            return False
            
        return self.send_email_report(html_report)


if __name__ == "__main__":
    # Test the agent
    generator = ReportGenerator()
    generator.generate_and_send() 